import { Component, Element, Event, EventEmitter, h, Prop, State } from '@stencil/core';
import { v4 as uuid } from 'uuid';

/**
 * Ontario Radio Button component properties
 */
export interface OntarioRadioButtonProperties {
	/**
	 * The checked attribute of the radio button.
	 *
	 * This value is updated through the onChange event handler and by default
	 * is set to false.
	 *
	 */
	checked?: boolean;

	/**
	 * Text to display as the radio button's label
	 *
	 * Setting the radio label can be done using the element content or setting
	 * the property. This property will take precedence.
	 *
	 * @example
	 * <ontario-radio-button radioLabel="Override Radio Label">Radio Label</ontario-radio-button>
	 *
	 * The resulting radio label text will display "Override Radio label".
	 *
	 */
	radioLabel: string;

	/**
	 * The unique identifier of the radio button. If no ID is passed, one will be autogenerated.
	 */
	radioId?: string;

	/**
	 ** The name assigned to the radio button. The name value is used to reference form data after a form is submitted.
	*/
	name: string;

	/**
	 * Used to define whether the input field is required or not. If required, the value passed should be 'required'.
	 */
	required?: boolean;

	/**
	 ** The radio button content value.
	*/
	value: string | number;
}

@Component({
	tag: 'ontario-radio-button',
	styleUrl: 'ontario-radio-button.scss',
	shadow: true,
})

export class OntarioRadioButton implements OntarioRadioButtonProperties {
	@Element() host: HTMLElement;

	/**
	 * The checked attribute of the radio button.
	 *
	 * This value is updated through the onChange event handler and by default
	 * is set to false.
	 *
	 */
	@Prop({ reflect: true, mutable: true }) checked?: boolean = false;

	/**
	 * Text to display as the radio button's label
	 *
	 * Setting the radio label can be done using the element content or setting
	 * the property. This property will take precedence.
	 *
	 * @example
	 * <ontario-radio-button radioLabel="Override Radio Label">Radio Label</ontario-radio-button>
	 *
	 * The resulting radio label text will display "Override Radio label".
	 *
	 */
	@Prop({ mutable: true }) radioLabel: string;

	/**
	 * The unique identifier of the radio button. If no ID is passed, one will be autogenerated.
	 */
	@Prop({ mutable: true }) radioId?: string;

	/**
	 ** The name assigned to the radio button. The name value is used to reference form data after a form is submitted.
	*/
	@Prop() name: string;

	/**
	 * Used to define whether the input field is required or not. If required, the value passed should be 'required'.
	 */
	@Prop({ reflect: true }) required?: boolean = false;

	/**
	 ** The radio button content value.
	*/
	@Prop() value: string | number;

	/**
	 ** Emitted when the input gains focus.
	*/
	@Event() radioChangeEvent!: EventEmitter<void>;

	@State() checkedValueSet: boolean = false;


	handleChange = (e: any) => {
		this.checked = e.target.checked;

		// uncheck any radio buttons with the same name value
		if (this.checked) {
			this.uncheckRadioButtonSiblings();
		}

		this.radioChangeEvent.emit()
	}

	private uncheckRadioButtonSiblings = () => {
		// get all sibling radio buttons with the same name value that are not the one being selected
		const radioButtonSiblings = Array.from(document.querySelectorAll(`ontario-radio-button[name="${this.name}"]`)).filter((radio: HTMLOntarioRadioButtonElement) => radio.radioId !== this.radioId);

		// manually set all sibling radio button's checked status to be false
		return radioButtonSiblings.forEach((radio: HTMLOntarioRadioButtonElement) => radio.checked = false);
	}

	private validateCheckedValue() {
		if (this.checked === true) {
			this.checkedValueSet = true;
			throw new Error('The default checked value of a radio button should be `false`. The checked attribute is controlled via the change event handler.');
		}

		this.checkedValueSet = false;
	}

	componentWillLoad() {
		// make sure a true checked value has not been set
		this.validateCheckedValue();

		this.radioLabel = this.radioLabel ?? this.host.textContent ?? '';
		this.radioId = this.radioId ?? uuid();
	}

	render() {
		return (
			this.checkedValueSet === false && (
				<div class="ontario-radios__item">
					<input
						checked={this.checked}
						class="ontario-radios__input"
						id={this.radioId}
						name={this.name}
						onChange={this.handleChange}
						type="radio"
						required={this.required}
						value={this.value}
					/>
					<label class="ontario-radios__label" htmlFor={this.radioId}>
						{this.radioLabel}
					</label>
				</div>
			)
		)
	}
}
