import { Component, Event, EventEmitter, h, Prop, State, Element } from '@stencil/core';
import { v4 as uuid } from 'uuid';
import { Input } from '../../utils/common.interface';
import { InputCaption } from '../../utils/input-caption/input-caption';

/**
 * Ontario Textarea component properties
 */

@Component({
	tag: 'ontario-textarea',
	styleUrl: 'ontario-textarea.scss',
	shadow: true,
})
export class OntarioTextarea implements Input {
	/**
	 * The text to display as label
	 *
	 * @example
	 * <ontario-input
	 *   caption='{
	 *     "caption": "Address",
	 *     "captionType": "heading",
	 *     "isRequired": true}'
	 *   ...>
	 * </ontario-input>
	 */
	@Prop() caption: InputCaption | string;

	/**
	 * Instantiate an InputCaption object for internal logic use
	 */
	@State() private captionState: InputCaption;

	/**
	 * The aria-describedBy value if the textarea has hint text associated with it.
	 */
	@Prop() describedBy?: string;

	/**
	 * The name assigned to the textarea. The name value is used to reference form data after a form is submitted.
	 */
	@Prop() name: string;

	/**
	 * The unique identifier of the textarea. If no ID is passed, one will be autogenerated.
	 */
	@Prop({ mutable: true }) elementId?: string;

	/**
	 * Used to define whether the textarea field is required or not.
	 */
	@Prop({ mutable: true }) required: boolean = false;

	/**
	 * The textarea content value.
	 */
	@Prop({ mutable: true }) value?: string;

	/**
	 * Grant access to the host element and related DOM methods/events within the class instance.
	 */
	@Element() element: HTMLElement;

	/**
	 * Emitted when the input loses focus.
	 */
	@Event() blurEvent!: EventEmitter<void>;

	/**
	 * Emitted when the input gains focus.
	 */
	@Event() focusEvent!: EventEmitter<void>;

	/**
	 * Emitted when a keyboard input occurred.
	 */
	@Event() changeEvent!: EventEmitter<KeyboardEvent>;

	@State() focused: boolean = false;

	handleBlur = () => {
		this.focused = false;
	};

	handleFocus = () => {
		this.focused = true;
	};

	handleChange = (ev: Event) => {
		const textarea = ev.target as HTMLInputElement | null;

		if (textarea) {
			this.value = textarea.value ?? '';
		}

		this.changeEvent.emit(ev as KeyboardEvent);
	};

	public getId(): string {
		return this.elementId ?? '';
	}

	componentWillLoad() {
		// the `toLowerCase()` function is needed because `tagName` returns a upper-cased string
		this.captionState = new InputCaption(this.element.tagName.toLowerCase(), this.caption);	
		this.elementId = this.elementId ?? uuid();
	}

	private getValue(): string | number {
		return this.value ?? '';
	}

	render() {
		return (
			<div>
				{this.captionState.getCaption(this.getId())}
				<slot name="hint-text"></slot>
				<textarea
					aria-describedby={this.describedBy}
					class="ontario-textarea"
					id={this.getId()}
					name={this.name}
					onBlur={this.handleBlur}
					onFocus={this.handleFocus}
					onInput={this.handleChange}
					required={this.required}
					value={this.getValue()}
				></textarea>
				<slot name="hint-expander"></slot>
			</div>
		);
	}
}
