/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface OntarioButton {
        /**
          * Overrides the default value of the `aria-label` HTML attribute.
         */
        "ariaLabel"?: string | null;
        /**
          * The unique identifier of the button
         */
        "buttonId"?: string | undefined;
        /**
          * The native HTML button type the button should use.
         */
        "htmlType"?: 'button' | 'reset' | 'submit';
        /**
          * Text to be displayed within the button. This will override the text provided through the Element Content.
          * @example <ontario-button label="Label Text">Text</ontario-button>      The resulting button will have the label `"Label Text"`.
         */
        "label"?: string | null;
        /**
          * The type of button to render.
         */
        "type": 'primary' | 'secondary' | 'tertiary';
    }
    interface OntarioHintText {
        /**
          * Text to display as the hint text statement
          * @example <ontario-hint-text hint="Hint Text"></ontario-button>   The resulting hint text will display `"Hint Text"`.
         */
        "hint": string | null;
        /**
          * Used to used to establish a relationship between hint text content and elements using aria-describedby.
         */
        "hintId"?: string | undefined;
    }
}
declare global {
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLOntarioButtonElement extends Components.OntarioButton, HTMLStencilElement {
    }
    var HTMLOntarioButtonElement: {
        prototype: HTMLOntarioButtonElement;
        new (): HTMLOntarioButtonElement;
    };
    interface HTMLOntarioHintTextElement extends Components.OntarioHintText, HTMLStencilElement {
    }
    var HTMLOntarioHintTextElement: {
        prototype: HTMLOntarioHintTextElement;
        new (): HTMLOntarioHintTextElement;
    };
    interface HTMLElementTagNameMap {
        "my-component": HTMLMyComponentElement;
        "ontario-button": HTMLOntarioButtonElement;
        "ontario-hint-text": HTMLOntarioHintTextElement;
    }
}
declare namespace LocalJSX {
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface OntarioButton {
        /**
          * Overrides the default value of the `aria-label` HTML attribute.
         */
        "ariaLabel"?: string | null;
        /**
          * The unique identifier of the button
         */
        "buttonId"?: string | undefined;
        /**
          * The native HTML button type the button should use.
         */
        "htmlType"?: 'button' | 'reset' | 'submit';
        /**
          * Text to be displayed within the button. This will override the text provided through the Element Content.
          * @example <ontario-button label="Label Text">Text</ontario-button>      The resulting button will have the label `"Label Text"`.
         */
        "label"?: string | null;
        /**
          * The type of button to render.
         */
        "type"?: 'primary' | 'secondary' | 'tertiary';
    }
    interface OntarioHintText {
        /**
          * Text to display as the hint text statement
          * @example <ontario-hint-text hint="Hint Text"></ontario-button>   The resulting hint text will display `"Hint Text"`.
         */
        "hint"?: string | null;
        /**
          * Used to used to establish a relationship between hint text content and elements using aria-describedby.
         */
        "hintId"?: string | undefined;
    }
    interface IntrinsicElements {
        "my-component": MyComponent;
        "ontario-button": OntarioButton;
        "ontario-hint-text": OntarioHintText;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "ontario-button": LocalJSX.OntarioButton & JSXBase.HTMLAttributes<HTMLOntarioButtonElement>;
            "ontario-hint-text": LocalJSX.OntarioHintText & JSXBase.HTMLAttributes<HTMLOntarioHintTextElement>;
        }
    }
}
